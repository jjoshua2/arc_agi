challenge_id: 93c31fbe
model: x-ai/grok-4-fast:free
prompt_hash: ad2e9567a02e78ea797984aacc237a114122606b06cdce31beafea874ca4938f
timestamp: 1758778640

Instructions:
- The text below is a readable dump of the prompt messages (roles + text).
- The JSON file contains the original messages structure.
- If available, wire.json contains the exact message payload sent to the provider.
- Paste into your UI accordingly and save the assistant response to manual_responses/ad2e9567a02e78ea797984aacc237a114122606b06cdce31beafea874ca4938f.txt

[SYSTEM]
You will be given some number of paired example inputs and outputs. The outputs were produced by applying a transformation rule to the inputs. In addition to the paired example inputs and outputs, there is also an additional input without a known output (or possibly multiple additional inputs). Your task is to determine the transformation rule and implement it in code.

The inputs and outputs are each "grids". A grid is a rectangular matrix of integers between 0 and 9 (inclusive). These grids will be shown to you as both images and grids of numbers (ASCII). You may also get an ASCII representation of the change for each cell comparing the input and output. For example 0 -> 1 means the value switched from 0 to 1 in that cell. `--` means the value in that cell did not change. The image and the grid of numbers for each input/output contain the same information: we just show both representations for convenience. Each number corresponds to a color in the image. The correspondence is as follows: black: 0, blue: 1, red: 2, green: 3, yellow: 4, grey: 5, pink: 6, orange: 7, purple: 8, brown: 9.

The transformation rule maps from each input to a single correct output, and your implementation in code must be exactly correct. Thus, you need to resolve all potential uncertainties you might have about the transformation rule. For instance, if the examples always involve some particular color being changed to another color in the output, but which color it is changed to varies between different examples, then you need to figure out what determines the correct output color. As another example, if some shape(s) or cells in the input are relocated or recolored, you need to determine which exact shapes should be relocated/recolored in the output and where they should be moved or what their color in the output should be. Whenever there are potential ambiguities or uncertainties in your current understanding of the transformation rule, you need to resolve them before implementing the transformation in code. You should resolve ambiguities and uncertainties by carefully analyzing the examples and using step by step reasoning.

The transformation rule might have multiple components and might be fairly complex. It's also reasonably common that the transformation rule has one main rule (e.g., replace cells in XYZ pattern with color ABC), but has some sort of exception (e.g., don't replace cells if they have color DEF). So, you should be on the lookout for additional parts or exceptions that you might have missed so far. Consider explicitly asking yourself (in writing): "Are there any additional parts or exceptions to the transformation rule that I might have missed?" (Rules don't necessarily have multiple components or exceptions, but it's common enough that you should consider it.)

Here are some examples of transformation rules with multiple components or exceptions:

- There is a grey grid with black holes that have different shapes and the rule is to fill in these holes with colored cells. Further, the color to use for each hole depends on the size of the hole (in terms of the number of connected cells). 1 cell holes are filled with pink, 2 cell holes are filled with blue, and 3 cell holes are filled with red.
- The output is 3x3 while the input is 3x7. The output has red cells while the input has two "sub-grids" that are 3x3 and separated by a grey line in the middle. Each of the sub-grids has some colored cells (blue) and some black cells. The rule is to AND the two sub-grids together (i.e., take the intersection of where the two sub-grids are blue) and color the 3x3 cells in the output red if they are in the intersection and black otherwise.
- The grey rectangular outlines are filled with some color in the output. Pink, orange, and purple are used to fill in the voids in different cases. The color depends on the size of the black void inside the grey outline where it is pink if the void has 1 cell (1x1 void), orange if the gap has 4 cells, and purple if the gap was 9 cells. For each void, all of the filled-in colors are the same.
- The red shape in the input is moved. It is moved either horizontally or vertically. It is moved until moving it further would intersect with a purple shape. It is moved in the direction of the purple shape, that is, moved in whichever direction would involve it eventually intersecting with this purple shape.

These are just example rules; the actual transformation rule will be quite different. But, this should hopefully give you some sense of what transformation rules might look like.

Note that in each of these cases, you would need to find the rule by carefully examining the examples and using reasoning. You would then need to implement the transformation rule precisely, taking into account all possible cases and getting all of the details right (e.g., exactly where to place various things or exactly which color to use in each case). If the details aren't fully ironed out, you should do additional reasoning to do so before implementing the transformation in code.

You'll need to carefully reason in order to determine the transformation rule. Start your response by carefully reasoning in <reasoning></reasoning> tags. Then, implement the transformation in code.

You follow a particular reasoning style. You break down complex problems into smaller parts and reason through them step by step, arriving at sub-conclusions before stating an overall conclusion. This reduces the extent to which you need to do large leaps of reasoning.

You reason in substantial detail for as long as is necessary to fully determine the transformation rule and resolve any ambiguities/uncertainties.

After your reasoning, write code in triple backticks (```python and then ```).
You should write a function called `transform` which takes a single argument, the input grid as `list[list[int]]`, and returns the transformed grid (also as `list[list[int]]`).
Your python code should not use libraries outside of the standard python libraries besides numpy.You can create helper functions.
You should make sure that you implement a version of the transformation which works in general (for inputs which have the same properties as the example inputs and the additional input(s)).
Don't write tests in your python code, just output the `transform` function.

[USER]
# Example 1

## Input 1


Shape: 10 by 10


ASCII representation:

0|0|0|0|9|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|8|8|0|0|0|0
0|0|0|0|8|8|0|0|0|0
0|0|0|0|8|8|0|0|0|0
6|0|0|0|8|8|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|4|0|0|0|0


[[0, 0, 0, 0, 9, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 8, 8, 0, 0, 0, 0],[6, 0, 0, 0, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 4, 0, 0, 0, 0]]
## Output 1


Shape: 10 by 10


ASCII representation:

0|0|0|0|9|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|9|8|0|0|0|0
0|0|0|0|8|8|0|0|0|0
0|0|0|0|8|8|0|0|0|0
6|0|0|0|6|4|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|4|0|0|0|0


[[0, 0, 0, 0, 9, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 9, 8, 0, 0, 0, 0],[0, 0, 0, 0, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 8, 8, 0, 0, 0, 0],[6, 0, 0, 0, 6, 4, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 4, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |8 -> 9|  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |8 -> 6|8 -> 4|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Example 2

## Input 2


Shape: 10 by 10


ASCII representation:

0|0|0|0|7|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
6|0|0|8|8|8|0|0|0|0
0|0|0|8|8|8|0|0|0|0
0|0|0|8|8|8|0|0|0|2
0|0|0|8|8|8|0|0|0|0
3|0|0|8|8|8|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|0|0|0


[[0, 0, 0, 0, 7, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[6, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 2],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[3, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]
## Output 2


Shape: 10 by 10


ASCII representation:

0|0|0|0|7|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
6|0|0|6|7|8|0|0|0|0
0|0|0|8|8|8|0|0|0|0
0|0|0|8|8|2|0|0|0|2
0|0|0|8|8|8|0|0|0|0
3|0|0|3|8|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|0|0|0


[[0, 0, 0, 0, 7, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[6, 0, 0, 6, 7, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 2, 0, 0, 0, 2],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[3, 0, 0, 3, 8, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 6|8 -> 7|  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |8 -> 2|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 3|  --  |8 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Example 3

## Input 3


Shape: 10 by 10


ASCII representation:

0|0|0|4|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|8|8|8|0|0|0|6
3|0|0|8|8|8|0|0|0|0
0|0|0|8|8|8|0|0|0|0
2|0|0|8|8|8|0|0|0|0
0|0|0|8|8|8|0|0|0|2
0|0|0|0|0|0|0|0|0|0
0|0|0|7|0|0|0|0|0|0


[[0, 0, 0, 4, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 6],[3, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[2, 0, 0, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 2],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 7, 0, 0, 0, 0, 0, 0]]
## Output 3


Shape: 10 by 10


ASCII representation:

0|0|0|4|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|4|8|6|0|0|0|6
3|0|0|3|8|8|0|0|0|0
0|0|0|8|8|8|0|0|0|0
2|0|0|2|8|8|0|0|0|0
0|0|0|7|8|2|0|0|0|2
0|0|0|0|0|0|0|0|0|0
0|0|0|7|0|0|0|0|0|0


[[0, 0, 0, 4, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 4, 8, 6, 0, 0, 0, 6],[3, 0, 0, 3, 8, 8, 0, 0, 0, 0],[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],[2, 0, 0, 2, 8, 8, 0, 0, 0, 0],[0, 0, 0, 7, 8, 2, 0, 0, 0, 2],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 7, 0, 0, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 4|  --  |8 -> 6|  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 3|  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 2|  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |8 -> 7|  --  |8 -> 2|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Additional input


Shape: 10 by 10


ASCII representation:

0|0|0|6|0|2|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
9|0|8|8|8|8|0|0|0|0
0|0|8|8|8|8|0|0|0|7
3|0|8|8|8|8|0|0|0|0
4|0|8|8|8|8|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0
0|0|0|0|6|0|0|0|0|0


[[0, 0, 0, 6, 0, 2, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[9, 0, 8, 8, 8, 8, 0, 0, 0, 0],[0, 0, 8, 8, 8, 8, 0, 0, 0, 7],[3, 0, 8, 8, 8, 8, 0, 0, 0, 0],[4, 0, 8, 8, 8, 8, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 6, 0, 0, 0, 0, 0]]

[ASSISTANT]
<reasoning>
The outputs always have the same shape as the inputs. The outputs are similar to the inputs, but some edits have been made.

I'll describe the changes from the input to the output in detail for each of the examples to infer the transformation rule. I'll also describe the input for each example.

In example 1:

- A new brown (color 9) cell replaces one of the purple (color 8) cells on the top left corner of a purple rectangle.
- A new pink (color 6) cell replaces a purple cell on the bottom left corner of the rectangle.
- A new yellow (color 4) cell replaces a purple cell on the bottom right corner of the rectangle.

The grid is otherwise unchanged.

The input for example 1:

- It has a purple rectangle in the middle.
- It has a brown cell directly above the purple rectangle.
- It has a pink cell directly to the left of the purple rectangle.
- It has a yellow cell directly below the purple rectangle.
- The brown cell is directly above the new brown cell (in the same column).
- The pink cell is directly to the left of the new pink cell (in the same row).
- The yellow cell is directly below the new yellow cell (in the same column).

In example 2:

- A new orange (color 7) cell replaces a purple (color 8) cell on the top of the purple rectangle.
- A new pink cell replaces a purple cell on the top left corner of the rectangle.
- A new red (color 2) cell replaces a purple cell on the middle right side of the rectangle.
- A new green (color 3) cell replaces a purple cell on the bottom left corner of the rectangle.
- A new blue (color 1) cell replaces a purple cell on the bottom right corner of the rectangle.

The input for example 2:

- It has a purple rectangle in the middle.
- It has an orange cell directly above the new orange cell (in the same column).
- It has a pink cell directly to the left of the new pink cell (in the same row).
- It has a red cell directly to the right of the new red cell (in the same row).
- It has a green cell directly to the left of the new green cell (in the same row).
- It has a blue cell directly below the new blue cell (in the same column).

In example 3:

- A new yellow cell replaces a purple cell on the top left corner of the purple rectangle.
- A new pink cell replaces a purple cell on the top right corner of the rectangle.
- A new red cell replaces a purple cell on the left side of the rectangle.
- A new orange cell replaces a purple cell on the bottom left corner of the rectangle.
- A new red cell replaces a purple cell on the bottom right corner of the rectangle. This is a different change than the prior red cell.
- A new green cell replaces a purple cell on the left side of the rectangle.

The input for example 3:

- It has a purple pixel in the middle.
- It has a yellow/pink/red/orange/red/green cell in the same column/row as the new cell with the matching color.

The input for the additional example:

- It has a purple rectangle in the middle.
- It has various colored pixels around the purple rectangle.

Given these observations, we can infer the transformation rule:

1. Identify a central shape (namely the purple rectangle).
2. Look for colored cells which aren't part of the central shape.
3. For each colored cell found around the central shape, replace a single cell on the edge of the central shape.
4. If the colored cell is above/below the central shape, replace the top/bottom (respectively) cell in the same column on the central shape with the colored cell.
5. If the colored cell is to the left/right of the central shape, replace the left/right cell in the same row on the central shape with the colored cell.

Now let's implement this in the code.
</reasoning>

```python
import numpy as np

def transform(grid_lst: list[list[int]]) -> list[list[int]]:
    grid = np.array(grid_lst)
    purple_color = 8

    # Find the bounding box of the purple rectangle
    purple_shape = np.argwhere(grid == purple_color)
    min_row, min_col = np.min(purple_shape, axis=0)
    max_row, max_col = np.max(purple_shape, axis=0)

    # Iterate over the grid to find colored cells around the purple rectangle
    rows, cols = grid.shape
    for row in range(rows):
        for col in range(cols):
            color = grid[row, col]
            if color != 0 and color != purple_color:
                # If the colored cell is above/below the central shape
                if col >= min_col and col <= max_col:
                    if row < min_row:
                        grid[min_row, col] = color
                    elif row > max_row:
                        grid[max_row, col] = color
                # If the colored cell is to the left/right of the central shape
                if row >= min_row and row <= max_row:
                    if col < min_col:
                        grid[row, min_col] = color
                    elif col > max_col:
                        grid[row, max_col] = color

    return grid.tolist()```

[USER]
Great work! Now I will give you another puzzle to solve just like that one.

[ASSISTANT]
Great, please give me the next puzzle.

[USER]
# Example 1

## Input 1


Shape: 23 by 25


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|0|0|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|0|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0],[0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0],[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Output 1


Shape: 23 by 25


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|1|1|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|1|1|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|1|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0],[0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0],[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Example 2

## Input 2


Shape: 22 by 23


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|0|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|0|0|8|0|0|1|1|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|1|0|0|0|8|0|0|0|0|0|1|0|8|0|0|0|0|0|0|1|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|0|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0],[0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],[0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 8, 1, 1, 0, 0, 0, 8, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0],[0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Output 2


Shape: 22 by 23


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|1|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|1|1|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|1|0|0|0|1|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|1|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|1|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0],[0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],[0, 0, 0, 8, 0, 1, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 8, 1, 1, 0, 1, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],[0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Example 3

## Input 3


Shape: 20 by 21


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|1|0|0|0|0|0|0|0
0|0|0|3|0|0|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0
0|0|0|0|0|0|1|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|1|1|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0],[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0],[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Output 3


Shape: 20 by 21


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|1|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 1, 0, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
## Color changes between the Input and Output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


# Additional input


Shape: 26 by 28


ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|4|4|0|0|4|4|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|4|0|1|0|0|4|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|1|0
0|0|0|0|1|1|0|0|0|0|0|0|4|4|0|0|0|0|4|4|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|4|0|1|0|0|0|0|4|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|4|0|1|0|0|0|0|4|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|4|4|0|0|0|0|4|4|0|0|0|0|0|0|0|0
0|0|4|0|0|0|0|4|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|4|4|0|0|4|4|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|4|4|0|0|0|4|4|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|4|0|0|0|0|0|4|0|0
0|0|0|0|1|0|0|1|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|4|4|0|0|0|0|0|0|0|0|4|4|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|4|0|0|1|0|0|0|0|0|0|0|4|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0
0|0|0|0|1|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|4|0|1|0|0|0|4|0|0
0|0|0|4|0|0|1|0|0|0|0|0|0|0|4|0|0|0|0|4|4|0|0|0|4|4|0|0
0|0|0|4|4|0|0|0|0|0|0|0|0|4|4|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0


[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],[0, 0, 4, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0],[0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 0],[0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0],[0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

[USER]

                    Here is a primitive that you can build upon to solve this problem. Remember, it's okay to not to use this primitive too
                    if you think it's not helpful.

                    from collections import deque
import math

def find_purple_components(grid):
    h = len(grid)
    if h == 0:
        return []
    w = len(grid[0])
    visited = [[False] * w for _ in range(h)]
    components = []
    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for i in range(h):
        for j in range(w):
            if grid[i][j] == 8 and not visited[i][j]:
                component = []
                queue = deque([(i, j)])
                visited[i][j] = True
                while queue:
                    r, c = queue.popleft()
                    component.append((r, c))
                    for dr, dc in dirs:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < h and 0 <= nc < w and not visited[nr][nc] and grid[nr][nc] == 8:
                            visited[nr][nc] = True
                            queue.append((nr, nc))
                components.append(component)
    return components

def transform(grid_lst):
    if not grid_lst:
        return []
    h = len(grid_lst)
    if h == 0:
        return []
    w = len(grid_lst[0])
    output = [row[:] for row in grid_lst]
    components = find_purple_components(grid_lst)
    for comp in components:
        if len(comp) < 2:
            continue
        rs = [p[0] for p in comp]
        cs = [p[1] for p in comp]
        min_r = min(rs)
        max_r = max(rs)
        min_c = min(cs)
        max_c = max(cs)
        center_r = (min_r + max_r) / 2.0
        center_c = (min_c + max_c) / 2.0
        orig_reds = []
        for r in range(min_r, max_r + 1):
            for c in range(min_c, max_c + 1):
                if 0 <= r < h and 0 <= c < w and grid_lst[r][c] == 2:
                    orig_reds.append((r, c))
        to_fill = set()
        for r, c in orig_reds:
            # horizontal mirror
            mc = 2 * center_c - c
            if math.isclose(mc, round(mc), abs_tol=1e-9):
                ic = round(mc)
                if 0 <= ic < w and grid_lst[r][ic] == 0:
                    to_fill.add((r, ic))
            # vertical mirror
            mr = 2 * center_r - r
            if math.isclose(mr, round(mr), abs_tol=1e-9):
                ir = round(mr)
                if 0 <= ir < h and grid_lst[ir][c] == 0:
                    to_fill.add((ir, c))
            # both mirrors
            if math.isclose(mr, round(mr), abs_tol=1e-9) and math.isclose(mc, round(mc), abs_tol=1e-9):
                ir = round(mr)
                ic = round(mc)
                if 0 <= ir < h and 0 <= ic < w and grid_lst[ir][ic] == 0:
                    to_fill.add((ir, ic))
        for pr, pc in to_fill:
            output[pr][pc] = 2
    return output

                    Here are the examples that have failed:
                    Example 0 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|0|0|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|0|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|0|0|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|0|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|1|1|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|1|1|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|1|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  

Example 1 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|0|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|0|0|8|0|0|1|1|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|1|0|0|0|8|0|0|0|0|0|1|0|8|0|0|0|0|0|0|1|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|0|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|0|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|0|0|8|0|0|1|1|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|1|0|0|0|8|0|0|0|0|0|1|0|8|0|0|0|0|0|0|1|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|0|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|1|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|1|1|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|1|0|0|0|1|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|1|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|1|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  

Example 2 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|1|0|0|0|0|0|0|0
0|0|0|3|0|0|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0
0|0|0|0|0|0|1|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|1|1|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|1|0|0|0|0|0|0|0
0|0|0|3|0|0|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0
0|0|0|0|0|0|1|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|1|1|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|1|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  


                

[USER]

                    Here is a primitive that you can build upon to solve this problem. Remember, it's okay to not to use this primitive too
                    if you think it's not helpful.

                    def transform(input_grid: list[list[int]]) -> list[list[int]]:
    if not input_grid or not input_grid[0]:
        return []
    rows = len(input_grid)
    cols = len(input_grid[0])
    # Assuming always 4x14 input, 4x7 output
    output = [[0 for _ in range(7)] for _ in range(rows)]
    for r in range(rows):
        for k in range(7):
            left_val = input_grid[r][k]
            right_val = input_grid[r][k + 7]
            if left_val == 0 and right_val == 0:
                output[r][k] = 5
    return output

                    Here are the examples that have failed:
                    
                

[USER]

                    Here is a primitive that you can build upon to solve this problem. Remember, it's okay to not to use this primitive too
                    if you think it's not helpful.

                    def transform(grid: list[list[int]]) -> list[list[int]]:
    if not grid or not grid[0]:
        return []
    n = len(grid)
    # Find central column: col with max non-zero cells
    max_nonzero = 0
    central_c = -1
    for j in range(n):
        count = sum(1 for i in range(n) if grid[i][j] != 0)
        if count > max_nonzero:
            max_nonzero = count
            central_c = j
    # V_color: most common non-zero color in central_c
    color_count = {}
    for i in range(n):
        colr = grid[i][central_c]
        if colr != 0:
            color_count[colr] = color_count.get(colr, 0) + 1
    V_color = max(color_count, key=color_count.get)
    # Central row: row with max V_color cells
    max_v = 0
    central_r = -1
    for i in range(n):
        count = sum(1 for j in range(n) if grid[i][j] == V_color)
        if count > max_v:
            max_v = count
            central_r = i
    # H_color: the other non-zero color in central_r
    h_colors = set()
    for j in range(n):
        colr = grid[central_r][j]
        if colr != 0 and colr != V_color:
            h_colors.add(colr)
    H_color = list(h_colors)[0] if h_colors else 0  # assuming exists
    # Top horizontal row: min r with H_color
    top_r = n
    for r in range(n):
        if any(grid[r][j] == H_color for j in range(n)):
            top_r = r
            break
    # left_h and right_h in top_r
    left_h = n
    right_h = -1
    for j in range(n):
        if grid[top_r][j] == H_color:
            left_h = min(left_h, j)
            right_h = max(right_h, j)
    new_col = right_h
    # Output starts as copy
    output = [row[:] for row in grid]
    # Remove V_color from central col
    for i in range(n):
        if output[i][central_c] == V_color:
            output[i][central_c] = 0
    # Remove V_color from central row
    for j in range(n):
        if output[central_r][j] == V_color:
            output[central_r][j] = 0
    # Extend horizontal at top_r left and right where 0
    for j in range(left_h):
        if output[top_r][j] == 0:
            output[top_r][j] = V_color
    for j in range(right_h + 1, n):
        if output[top_r][j] == 0:
            output[top_r][j] = V_color
    # Add V_color to new_col where 0
    for i in range(n):
        if output[i][new_col] == 0:
            output[i][new_col] = V_color
    return output

                    Here are the examples that have failed:
                    Example 0 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|0|0|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|0|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|2|0|0|0|0|0|0|2|0|0
0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|2|0|0|0|2|0|0|2|2|0
0|0|0|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|2|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|0|2|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|1|2|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|0|0|0
0|0|2|0|0|0|1|1|0|0|1|1|0|0|0|2|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|1|0|0|0|0|1|1|0|0|0|0|0|0|2|2|0|2|2|0
0|0|2|0|0|0|0|0|1|1|0|0|0|0|0|2|0|0|0|2|0|0|0|2|0
0|0|2|2|0|0|0|0|0|0|0|0|0|0|2|2|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|2|0|0|0|2|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|2|2|0|2|2|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|0|0|0|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|2|2|0|2|2|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |0 -> 2|0 -> 2|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 2|0 -> 2|  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |0 -> 2|  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |0 -> 2|  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |0 -> 2|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 1|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |2 -> 0|  --  |  --  

Example 1 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|0|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|0|0|8|0|0|1|1|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|1|0|0|0|8|0|0|0|0|0|1|0|8|0|0|0|0|0|0|1|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|0|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|8|0|1|0|0|0|8|0|0|0|0|0|0|0|1|1|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|8|0
0|0|0|8|1|1|0|0|0|8|0|0|1|1|0|0|0|0|1|1|0|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|8|0
0|0|1|0|0|0|8|0|0|0|0|0|1|0|8|0|0|0|0|0|0|1|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|8|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|8|0|0|0|0|1|0|0|8|0|0|0|0|0|0|8|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|8|0|1|0|1|0|8|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|8|1|1|0|1|1|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|8|8|0|0|0|8|8|0|0|0|0|0|0|0|0|1|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|0|0|0|0|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|8|8|0|0|8|8|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|1|0|0|0|1|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|1|0|0|0|1|1|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|0|0|1|0|1|0|0|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|8|8|0|0|0|0|0|8|8|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |0 -> 8|0 -> 8|  --  |  --  |  --  |0 -> 8|0 -> 8|  --  |  --  |  --  |  --  |  --  |  --  |0 -> 8|  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |8 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |8 -> 0|  --  

Example 2 failed
# Input ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|1|0|0|0|0|0|0|0
0|0|0|3|0|0|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0
0|0|0|0|0|0|1|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|1|1|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Incorrect Transformed Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0
3|3|3|3|3|3|3|3|3|3|3|3|3|1|3|3|3|3|3|3|0
0|0|0|0|0|0|0|0|0|3|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|1|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|1|1|0
0|0|0|0|0|0|0|1|0|0|0|0|0|3|0|0|0|0|0|1|0
0|0|0|0|0|1|0|1|0|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|1|0|0|0|3|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|3|0|0|0|3|3|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|3|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0
0|0|0|0|0|0|1|0|0|0|0|3|0|3|0|0|0|3|0|0|0
0|0|1|1|0|0|0|0|0|0|0|3|3|3|0|0|3|3|0|0|0
0|0|0|1|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0

# Expected Output ASCII representation:

0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|0|1|0|0|0|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|3|3|0|0|0|3|3|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|1|0|1|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|1|1|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|0|0|0|0|0|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|3|3|0|0|0|3|3|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0

# Color changes between transformed output and expected output ASCII representation:

  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
3 -> 0|3 -> 0|3 -> 0|  --  |  --  |3 -> 0|3 -> 0|3 -> 0|  --  |  --  |3 -> 0|3 -> 0|3 -> 0|1 -> 0|3 -> 0|3 -> 0|3 -> 0|3 -> 0|3 -> 0|3 -> 0|  --  
  --  |  --  |  --  |0 -> 3|  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|0 -> 1|  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |1 -> 0|1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |0 -> 3|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |0 -> 3|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |0 -> 1|0 -> 1|  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |1 -> 0|1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |1 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  
  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |  --  |3 -> 0|  --  |  --  |  --  |  --  |  --  |  --  |  --  


                
